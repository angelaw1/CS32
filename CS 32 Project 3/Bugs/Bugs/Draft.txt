bool Ant::simpleInterpreter(int instructionCounter, Compiler* c)
{
	int oldX = getX();
	int oldY = getY();
	bool finished = false;
	
	Compiler::Command cmd;
	if (!(c->getCommand(instructionCounter, cmd)))
		return false;
	switch (cmd.opcode)
	{
		case Compiler::moveForward: {
			oldX = getX();
			oldY = getY();
			string coord = "";
			coord += getX();
			coord += ", ";
			coord += getY();
			if (moveForwardIfPossible())
				notBlocked.push_back(coord);
			else
				blocked.push_back(coord);
			m_instructionCounter++;
			break;
		}
		case Compiler::eatFood:
			int amountEaten = getFood();
			if (getFood() > 100)
				amountEaten = 100;
			updateEnergy(amountEaten);
			addFood(-1 * amountEaten);
			m_instructionCounter++;
			break;
		case Compiler::dropFood:
			getStudentWorldPtr()->constructFood(getX(), getY(), getFood());
			addFood(-1 * getFood());
			m_instructionCounter++;
			break;
		case Compiler::bite:
			int totalEnemies = getStudentWorldPtr()->numberOfEnemies(getX(), getY(), m_colonyNum, this);
			getStudentWorldPtr()->biteRandomEnemy(getX(), getY(), m_colonyNum, randInt(1, totalEnemies), this, 15);
			m_instructionCounter++;
			break;
		case Compiler::pickupFood:
			int amtOfFood = getStudentWorldPtr()->unitsOfFoodAt(getX(), getY());
			if (amtOfFood > 0 && getFood() < 1800) {
				if (1800 - getFood() > amtOfFood) {
					amtOfFood = 1800 - getFood();
				}
				if (amtOfFood > 400)
					amtOfFood = 400;
				getStudentWorldPtr()->eatFoodAt(getX(), getY(), amtOfFood);
				addFood(amtOfFood);
			}
			m_instructionCounter++;
			break;
		case Compiler::emitPheromone:
			getStudentWorldPtr()->addPheromone(getX(), getY(), m_colonyNum);
			m_instructionCounter++;
			break;
		case Compiler::faceRandomDirection:
			setDirection(getRandomDir());
			m_instructionCounter++;
			break;
		case Compiler::rotateClockwise:
			if (getDirection() == right)
				setDirection(down);
			else if (getDirection() == down)
				setDirection(left);
			else if (getDirection() == left)
				setDirection(up);
			else
				setDirection(right);
			m_instructionCounter++;
			break;
		case Compiler::rotateCounterClockwise:
			if (getDirection() == right)
				setDirection(up);
			else if (getDirection() == up)
				setDirection(left);
			else if (getDirection() == left)
				setDirection(down);
			else
				setDirection(right);
			m_instructionCounter++;
			break;
		case Compiler::generateRandomNumber:
			if (cmd.operand1 == "0")
				m_lastRandNum = 0;
			else
				m_lastRandNum = randInt(1, stoi(cmd.operand1) - 1);
			m_instructionCounter++;
			break;
		case Compiler::goto_command:
			m_instructionCounter = stoi(cmd.operand1);
			break;
		case Compiler::if_command: {
			bool statement = false;
			if (cmd.operand1 == "0") {
				int x;
				int y;
				getXYInFrontOfMe(x, y);
				if (getStudentWorldPtr()->isDangerAt(x, y, m_colonyNum))
					statement = true;
			}
			if (cmd.operand1 == "1") {
				if (getStudentWorldPtr()->isPheromoneAt(getX(), getY(), m_colonyNum))
					statement = true;
			}
			if (cmd.operand1 == "2") {
				string current = "";
				current += getX();
				current += ", ";
				current += getY();
				for (int i = 0; i != bitten.size(); i++)
					if (current == bitten[i])
						statement = true;
			}
			else if (cmd.operand1 == "3") {
				if (getFood() > 0)
					statement = true;
			}
			else if (cmd.operand1 == "4") {
				if (getEnergy() <= 25)
					statement = true;
			}
			else if (cmd.operand1 == "5") {
				if (getStudentWorldPtr()->isAnthillAt(getX(), getY(), m_colonyNum))
					statement = true;
			}
			else if (cmd.operand1 == "6") {
				if (getStudentWorldPtr()->unitsOfFoodAt(getX(), getY()) > 0)
					statement = true;
			}
			else if (cmd.operand1 == "7") {
				if (getStudentWorldPtr()->numberOfEnemies(getX(), getY(), m_colonyNum, this) > 0)
					statement = true;
			}
			else if (cmd.operand1 == "8") {
				string last = "";
				last += oldX;
				last += ", ";
				last += oldY;
				if (!notBlocked.empty() && notBlocked[notBlocked.size() - 1] == last)
					statement = true;
			}
			else if (cmd.operand1 == "9") {
				if (m_lastRandNum == 0)
					statement = true;
			}
			if (statement)
				m_instructionCounter = stoi(cmd.operand2);
			else 
				m_instructionCounter++;
			break;
		}

	}
}